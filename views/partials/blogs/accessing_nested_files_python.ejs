
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Nested Py Files</title>
  <link type="text/css" rel="stylesheet" href="/prism.css"  />
  <link type="text/css" rel="stylesheet" href="/blogs.css"  />
  <style>
    
    .invalid {
      color: red;
    }
    .valid {
      color: red;
    }
    .code-file-name {
      background: lightblue;
    }
  </style>
</head>
<body>
  <a href="/blog"><div>Back</div></a>
  <main class="individual-blog-wrapper">

    <h1 class="individual-blog-title">
      Accessing Nested Files in our Python App
    </h1>
    
    <h2 class="individual-blog-sub-title">
      The Problem:
    </h2>
    <h2 class="individual-blog-sub-title">
      Python by default cannot find a nested file.
    </h2>

    <p class="individual-blog-text-block">
      When our Python project starts to get more complex we will inevetably write multiple .py files and then we will start to organize our .py files into directories and sub-directories. 
    </p>

    <p class="individual-blog-text-block">
      Now Python has an <code>import</code> statement which allows us to reference a module (a .py file) from another module. And as a side note I really like the syntax and readability of Pythons implementation of requiring files/modules. I believe it is one of the best implementations in the industry.
    </p>

    <h3 class="individual-blog-text-header">
      Common ways you will see the <code>import</code> statement used:
    </h3>
    <pre class="language-python">
<code class="language-python">
  # bring the whole dictionary
  import os             

  # only bring a specific item
  from time import timezone  

  # we can rename our import
  from myFile import function as fn  
</code>
    </pre>

    <p class="individual-blog-text-block">
      So I mentioned above in the sub-title that by default Pythons <code>import</code> statement cannot find a nested file. But before we get to how to make Python find our files lets look at what Python can recognize as a default. 
    </p>
    <h3 class="individual-blog-text-header">And that is:</h3>
    <ol class="individual-blog-text-block">
      <li>Standard Library Modules</li>
      <li>Any file that is on the same "level" as it is.</li>
    </ol>

    <p class="individual-blog-text-block">
      The standard library is all the prewritten code that comes with the stock Python language. These are items like math functionality, operating system functions, time and date methods, etc. Most all the common operations that you would expect a programming language to have. The second item is just saying that whatever is on the same 'level' (read here not nested) as the file being called.
    </p>

    <h3 class="individual-blog-text-header">
      So lets learn how to make Python find our nested files.
    </h3>

    <h3 class="individual-blog-text-header">
      Our file structure for this tutorial will look like this.
    </h3>
  
    <pre>
    
      /myApp
        |
        |> main.py
        |
        |> file.py
        |
        |> <span class="invalid">/Dir1</span>
            |
            |> file1.py
            |
            |> <span class="invalid">/Dir2</span>
                |
                |> file2.py

        * NOTE: anything with a forward slash '/' in front of it is a directory
    </pre>

    <p>Now lets examine our main.py file</p>
    <div class="code-file-name">main.py</div>
    <pre class="language-python">
    <code class="language-python">
      import sys                  # ok -> this is part of standard library
      from time import timezone   # ok -> this is part of standard library
      import file                 # ok -> this is on the same 'level'
      import file1                # fail -> ModuleNotFoundError: No module named 'fileNotFound'
    </code>
    </pre>

    <p>We want to include this file but python cannot find it and is throwing an error like: </p>
    
    <pre>

                        
                      /~~~\
                     | o o |
                [][]  \___/  [][]
                [][]___( )___[][]
                       ( )
                       / \
                     _/   \_
    </pre>
    </main>
  </body>
<script src="/prism.js"></script>
</html>