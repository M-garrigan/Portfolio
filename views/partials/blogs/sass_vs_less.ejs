

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>HOC's</title>
  <link type="text/css" rel="stylesheet" href="/prismJS.css"  />
  <link type="text/css" rel="stylesheet" href="/blogs.css"  />
</head>
<body>
  <main class="individual-blog-wrapper">
    <%- include('../individualBlogHeader') %>

    <h1 class="individual-blog-title">
      How is Sass different from Less?
    </h1>

    <h3 class="individual-blog-section">
      TLDR:
    </h3>
    <p class="individual-blog-text-block">
      Sass and Less provide mostly the same functionality. So don't sweat it.
    </p>

    <p class="individual-blog-text-block">
      Although CSS has powerful features there has always been a desire to add functionality. This is the role that Sass/Less had provided for the past decade.
    </p>

    <p class="individual-blog-text-block">
      The Core of Sass/Less is:
    </p>
    <p class="individual-blog-text-block">
      1) A Superset of CSS
    </p>
    <p class="individual-blog-text-block">
      2) A preprocessor that compiles to CSS
    </p>

    <p class="individual-blog-text-block">
      LESS - version 3.9.0
    </p>

    <p class="individual-blog-text-block">
      SASS:   
    </p>
    <p class="individual-blog-text-block">
      - Dart Sass version - 1.21.0
    </p>
    <p class="individual-blog-text-block">
      - LibSass version - 3.6.0
    </p>
    <p class="individual-blog-text-block">
      - Ruby Sass - No longer supported
    </p>

    <h3 class="individual-blog-section">
      SASS & SCSS 
    </h3>

    <p class="individual-blog-text-block">
      Variables - imperative, default values, block scoped, advanced variable functions.
    </p>      

    <p class="individual-blog-text-block">
      Interpolation
    </p>

    <p class="individual-blog-text-block">
      at-rules
    </p>
    <p class="individual-blog-text-block">
      @import extends the CSS at-rule to load styles, mixins, functions, and variables from other stylesheets.
    </p>
    <p class="individual-blog-text-block">
      @mixin and @include makes it easy re-use chunks of styles.
    </p>
    <p class="individual-blog-text-block">
      @function defines custom functions that can be used in SassScript expressions.
    </p>
    <p class="individual-blog-text-block">
      @extend allows selectors to inherit styles from one another.
    </p>
    <p class="individual-blog-text-block">
      @at-root puts styles within it at the root of the CSS document.
    </p>
    <p class="individual-blog-text-block">
      @error causes compilation to fail with an error message.
    </p>
    <p class="individual-blog-text-block">
      @warn prints a warning without stopping compilation entirely.
    </p>
    <p class="individual-blog-text-block">
      @debug prints a message for debugging purposes.
    </p>
    <p class="individual-blog-text-block">
      Flow control rules like @if, @each, @for, and @while control whether or how many times styles are emitted.
    </p>

    <h3 class="individual-blog-text-header">
      Value Types: 
    </h3>
    <p class="individual-blog-text-block">
      Numbers, strings, colors, list of values, boolean, null, maps/objects/hash, function references.
    </p>

    <h3 class="individual-blog-text-header">
      Operators: 
    </h3>
    <p class="individual-blog-text-block">
      Equality, relational, numeric, string, boolean.
    </p>

    <p class="individual-blog-text-block">
      Build-in and user defined functions.
    </p>

    <h3 class="individual-blog-section">
      LESS 
    </h3>

    <p class="individual-blog-text-block">
      Variables - variable variables, lazy evaluation, properties as variables, default values.
    </p>      

    <p class="individual-blog-text-block">
      Interpolation
    </p>

    <p class="individual-blog-text-block">
      Parent Selectors
    </p>
    <p class="individual-blog-text-block">
      @import extends the CSS at-rule to load styles, mixins, functions, and variables from other stylesheets.
    </p>
    <p class="individual-blog-text-block">
      @mixin and @include makes it easy re-use chunks of styles.
    </p>
    <p class="individual-blog-text-block">
      @function defines custom functions that can be used in SassScript expressions.
    </p>
    <p class="individual-blog-text-block">
      @extend allows selectors to inherit styles from one another.
    </p>
    <p class="individual-blog-text-block">
      @at-root puts styles within it at the root of the CSS document.
    </p>
    <p class="individual-blog-text-block">
      @error causes compilation to fail with an error message.
    </p>
    <p class="individual-blog-text-block">
      @warn prints a warning without stopping compilation entirely.
    </p>
    <p class="individual-blog-text-block">
      @debug prints a message for debugging purposes.
    </p>
    <p class="individual-blog-text-block">
      Flow control rules like @if, @each, @for, and @while control whether or how many times styles are emitted.
    </p>

    <h3 class="individual-blog-text-header">
      Value Types: 
    </h3>
    <p class="individual-blog-text-block">
      Numbers, strings, colors, list of values, boolean, null, maps/objects/hash, function references.
    </p>

    <h3 class="individual-blog-text-header">
      Operators: 
    </h3>
    <p class="individual-blog-text-block">
      Equality, relational, numeric, string, boolean.
    </p>

    <p class="individual-blog-text-block">
      Build-in and user defined functions.
    </p>
    
    </main>
  </body>
<script src="/prismJS.js"></script>
</html>