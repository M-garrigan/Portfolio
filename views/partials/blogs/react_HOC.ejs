
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>HOC's</title>
  <link type="text/css" rel="stylesheet" href="/prismJS.css"  />
  <link type="text/css" rel="stylesheet" href="/blogs.css"  />
</head>
<body>
  <a href="/blog"><div>Back</div></a>
  <main class="individual-blog-wrapper">

    <h1 class="individual-blog-title">
      React HOC
    </h1>
    
    <h2 class="individual-blog-sub-title">
      Higher Order Component
    </h2>

    <p class="individual-blog-text-block">
      As with many things in software engineering a Higher Order Component or (HOC) seems on the surface to be quite complicated but with careful examination is really a simple design pattern. And even though we are looking a React HOCs' it is important to note that HOCs' are just a design pattern used in building React applications and HOCs' are not defined by or native to React in any way.
    </p>

    <p class="individual-blog-text-block">
      I would like to explain two concepts before starting our code that implements bulding a HOC. The first will be 'Higher Order Functions' and second will be 'What is a React Component?'
    </p>

    <h3 class="individual-blog-section">
      1. Higher Order Functions or HOF
    </h3>

    <p class="individual-blog-text-block">
      A HOF is a function that operates on other functions. Below is a quick look at the three ways a HOF can be used. Also not all programming languages allow you to pass a function as a parameter or return a function from a function. But Javascript does and we can use HOFs to create powerful programming techniques and patterns.
    </p>

    <h3 class="individual-blog-text-header">
      Three signatures of HOF's: 
      <ol>
        <li>A function that accepts functions as arguments</li>
        <pre class="language-javascript">
<code class="language-javascript">
  function myHOF (function1) {
    const result = function1();
    return result;
  } 
  // usage
  myHOF( (value) => {return value++;} );
</code>
    </pre>
        <li>A function that returns a function</li>
        <pre class="language-javascript">
<code class="language-javascript">
  function myHOF (value) {
    return function () {
      return value++;
    }
  } 
  // usage
  myHOF(5)();
</code>
    </pre>
        <li>A function that does both</li>
        <pre class="language-javascript">
<code class="language-javascript">
  function myHOF (function1, function2, data) {
    return function () {
      return function1(data[0]) + function2(data[1]);
    }
  } 
  // usage
  myHOF(
    value => value * value,
    value => value / value,
    [10, 40]
  )();
</code>
    </pre>
      </ol>
    </h3>



    <p class="individual-blog-text-block">
      A higher order function is a very much the same as a higher order component but differs in its inputs and outputs. So a HOF can take a function in as a parameter and returns a new function. Whereas our HOC takes in and returns React Components.
    </p>


    

    <p class="individual-blog-text-block">PICTURE HERE >>></p>

    <h3 class="individual-blog-section">
      2. What is a React Component?
    </h3>

    <p class="individual-blog-text-block">
      At a very basic sense a React Component is a function that takes props as a parameter and returns UI. So props as in 'this.props' and UI (user interface) as JSX. And JSX will become what we eventually see on our website as HTML elements.
    </p>

    <p class="individual-blog-text-block">PICTURE HERE >>></p>

    <h3 class="individual-blog-text-header">
      Examples of HOCs in the wild: 
      <ol>
        <li>Redux: connect()</li>
        <li>
          React Router: 
        </li>
      </ol>
    </h3>

    <h3 class="individual-blog-text-header">
      Attributes of a HOC:
      <ol>
        <li>A pure function that has no side effects</li>
        <li>Accepts a react component as a parameter and returns a new react component</li>
      </ol>
    </h3>

    <h3 class="individual-blog-section">
      What problem does a HOC solve?
    </h3>

    <p class="individual-blog-text-block">
      HOC's main strength is keeping our code DRY. Where DRY is an acronym for Don't Repeat Yourself. A HOC will define behavior that we would like in our component, so we can use our HOC in multiple locations within our code and use the same HOC to wrap our component.
    </p>

    <h3 class="individual-blog-section">
      What problem does a HOC create?
    </h3>

    <p class="individual-blog-text-block">
      HOC's main weakness that it can override prop names on our components if we are careless. And if we add methods to the original component that are setting state then we can make code that is dificult to understand. And lastly you can chain HOCs and create a very complex statement. Like HOC1(HOC2(HOC3(HOC4(BaseComponent))))
    </p>

    <h3 class="individual-blog-section">
      So lets make a HOC !!!
    </h3>

    <p class="individual-blog-text-block">
      First we will define the function.
    </p>

    <pre class="language-javascript">
<code class="language-javascript">
  function myHOC (BasicComponent) {
    
  } 

  function myHOC (BasicComponent) {
    return class HOC extends React.Component {
      render() {
        return <BasicComponent />
      }
    }
  } 

  function myHOC (BasicComponent) {
    return class HOC extends React.Component {
      constructor(props) {
        super(props);
        this.injectedProp = "A special string.";
      }
      injectedMethod = (value) => {
        return value++;
      }
      render() {
        return (
          <BasicComponent 
            injectedProp={this.injectedProp}
            injectedMethod={this.injectedMethod}
            {...this.props}
          />
        )
      }
    }
  } 
  
</code>
    </pre>


    </main>
  </body>
<script src="/prismJS.js"></script>
</html>