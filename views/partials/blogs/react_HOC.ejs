
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Nested Py Files</title>
    <link type="text/css" rel="stylesheet" href="/prism.css"  />
    <link type="text/css" rel="stylesheet" href="/styles/global.css"  />
    <link type="text/css" rel="stylesheet" href="/styles/blogs.css"  />
  </head>
<body>
  <main class="individual-blog-wrapper">
    <%- include('../blogSubheading') %>

    <h1 class="individual-blog-title">
      React HOC's
    </h1>

    <p class="individual-blog-text-block">
      As with many things in software engineering a Higher Order Component or (HOC) seems on the surface to be quite complicated but with careful examination is really a simple design pattern. And even though we are looking at a HOC in the context of React it is important to note that HOCs' are just a design pattern used in building React applications and HOCs' are not defined by or native to React in any way.
    </p>

    <p class="individual-blog-text-block">
      I would like to explain two concepts before starting our code that implements bulding a HOC. The first will be 'Higher Order Functions' and second will be 'What is a React Component?'
    </p>

    <h3 class="individual-blog-section">
      1. Higher Order Functions or HOF
    </h3>

    <p class="individual-blog-text-block">
      A HOF is a function that operates on other functions. HOF's are a programming paradigm that stems from functional programming. Not all programming languages make it easy (or allow it at all) to pass a function as a parameter or return a function from a function. But Javascript does and we can use HOFs to create powerful programming techniques and patterns.
    </p>      

    <p class="individual-blog-text-block">
      Javascript treats functions as 'first class citizens' which means Javascript functions have these attributes: 
    </p>

    <p class="individual-blog-text-block">
      1) Functions can be stored in a variable and nested in a data structure.
    </p>
    <p class="individual-blog-text-block">
      2) Functions can be passed to and returned from functions.
    </p>
    <p class="individual-blog-text-block">
      3) Functions can have properties and methods.
    </p>

    <p class="individual-blog-text-block">
      Below is a quick look at the three ways a HOF can be used. 
    </p>

    <h3 class="individual-blog-text-header">
      Three signatures of HOF's: 
    </h3>

    <div class="code-group-wrapper">  
      <p class="code-group-title">
        1) A function that accepts functions as arguments
      </p>
      <pre class="language-javascript">
        <code class="language-javascript">
  function myHOF (function1, value) {
    const result = function1(value) + function1(value);
    return result;
  } 

  // usage
  const double = (value) => {return value + value;} 
  myHOF( double );
        </code>
      </pre>
    </div>

    <div class="code-group-wrapper">  
      <p class="code-group-title">
        2) A function that returns a function
      </p>
      <pre class="language-javascript">
        <code class="language-javascript">
  function myHOF (value) {
    return function () {
      return value+=1;
    }
  } 

  // usage
  myHOF(5)( ); // note the empty paren at the end invokes the returned function
        </code>
      </pre>
    </div>

    <div class="code-group-wrapper">  
      <p class="code-group-title">
        3) A function that does both
      </p>
      <pre class="language-javascript">
        <code class="language-javascript">
  function myHOF (function1, function2, data) {
    return function () {
      return function1(data[0]) + function2(data[1]);
    }
  } 

  // usage
  myHOF(
    value => value * value,
    value => value / value,
    [10, 40]
  )( ); // returns 101
        </code>
      </pre>
    </div>

    <p class="individual-blog-text-block">
      A higher order function is a very much the same as a higher order component but differs in its inputs and outputs. So a HOF can take a function in as a parameter and returns a new function. Whereas our HOC takes in and returns React Components.
    </p>

    <div class="individual-blog-svg-image-and-caption">
      <div class="individual-blog-svg-HOF-Factory"></div>
      <div class="individual-blog-caption-group">
        Note: If our HOF is returning a function then our original function will not be be available to us until we call our new function. Once that happens our original function will have access to all variables and parameters defined in the new functions run time via JavaScript's Closure mechanism.
      </div>
    </div>

    <h3 class="individual-blog-section">
      2. What is a React Component?
    </h3>

    <p class="individual-blog-text-block">
      At a very basic sense a React Component is a function that takes props as a parameter and returns UI. So props as in 'this.props' and UI (user interface) as JSX. And JSX will become what we eventually see on our website as HTML elements.
    </p>

    <h3 class="individual-blog-section">
      3. Higher Order Components or HOCs
    </h3>

    <p class="individual-blog-text-block">
      A HOC is a function that operates on React Components. This programming pattern will give us the ability to 'wrap' any component with additional logic in the form of props and methods.
    </p>   

    <h3 class="individual-blog-text-header">
      Attributes of a HOC:
      <ol>
        <li>A pure function that has no side effects</li>
        <li>Accepts a react component as a parameter and returns a new react component</li>
      </ol>
    </h3>

    <div class="individual-blog-svg-image-and-caption">
      <div class="individual-blog-svg-HOC-Factory"></div>
      <div class="individual-blog-caption-group">
        Note: We have returned a new React component with the original component inside (modified to include extra data). But we will not be able to gain access to the original component until we are using/calling our new component. At that point the new component will return our original component to the front end ui. 
      </div>
    </div>

    <h3 class="individual-blog-section">
      What problem does a HOC solve?
    </h3>

    <p class="individual-blog-text-block">
      HOC's main strength is keeping our code DRY. Where DRY is an acronym for Don't Repeat Yourself. A HOC will define behavior that we would like in our component, so we can use our HOC in multiple locations within our code and use the same HOC to wrap our component.
    </p>

    <h3 class="individual-blog-section">
      What problem does a HOC create?
    </h3>

    <p class="individual-blog-text-block">
      HOC's main weakness that it can override prop names on our components if we are careless. And if we add methods to the original component that are setting state then we can make code that is dificult to understand. And lastly you can chain HOCs and create a very complex statement. Like HOC1(HOC2(HOC3(HOC4(BaseComponent))))
    </p>

    <br/>
    <h3 class="individual-blog-section">
      So lets make a HOC !!!
    </h3>
    <br/>

    <div class="code-group-wrapper">  
      <p class="code-group-title">
        First we will define BaseComponent.
      </p>
      <pre class="language-javascript">
        <code class="language-javascript">
  import React, { Fragment } from 'react';
  import hoc from './hoc.js

  const BasicComponent = props => (
    &lt Fragment >
      &ltbutton 
        onClick={ event => 
          props.setRandom(event)
        }
      >
        {
          props.ids.map( id => (
            &ltp key={id} >
              {`This id number is: ${id}`}
            &ltp>
          ))
        }
      &lt / button >
    &lt / Fragment >
  );

  export default hoc(BaseComponent)
   
        </code>
      </pre>
    </div>

    <p class="individual-blog-text-block">
      So our BaseComponent has a method passed down that adds a random number into the array called 'ids' when the button is pressed. Next the component is mapping over the array of ids and displaying them in a &ltp> tag. Pretty simple yes?
    </p>
    
    <div class="code-group-wrapper">  
      <p class="code-group-title">
        Next we define our HOC.
      </p>
      <pre class="language-javascript">
        <code class="language-javascript">
  import React, { Component } from 'react';

  const hoc = OriginalComponent => (
    class extends Component { // implicit return 
      state = {
        ids: [ 104, 763 ]
      }

      setRandomValue = event => {
        event.preventDefault();
        const rand = Math.floor(Math.random() * 1000);
        this.setState( prevState => ({
          ids: [ ...prevState.ids, rand ]
        }));
      }

      render() {
        return(
          &lt OriginalComponent
            ids={this.state.ids}
            setRandom={this.setRandomValue}
            { ...this.props }
          />
        )
      }
    }
  )
    
  export default hoc
        </code>
      </pre>
    </div>

    <p class="individual-blog-text-block">
      So now the hoc. The first thing to notice is that hoc is just a normal function that accepts a React Component. Next item is the implicit return that is returning a nameless react class component. It is important to remember that we are returning a new React Component that is nameless. So we will not have access to our original React component until the component is acually rendered in our application. The last thing to point our is now if we wanted to add this random number generator that is named 'setRandomValue' and the accompaning ids array we can use this hoc to wrap any component that we would like and share this logic.
    </p>

    <p class="individual-blog-text-block">
      Thanks for making it to the end. HAPPY CODING!!!
    </p>
    <br/>
    <br/>
    <br/>
    </main>
  </body>
<script src="/prismJS.js"></script>
</html>